# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Mismatch_Identifier_PluginDialog
                                 A QGIS plugin
 This Plugin identifies errors in the Fiber Optic Cartography
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by ESSAYEH Omar / AMARIS CONSULTING
        email                : sayehomar03@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .GridCapture import GridCapture
from .File_loader import FileLoader

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "Mismatch_Identifier_Plugin_dialog_base.ui")
)

class Mismatch_Identifier_PluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Mismatch_Identifier_PluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # Connect the Start Process button
        self.Start_Process.clicked.connect(self.on_test_button_pressed)
        
        # Create a FileLoader instance
        self.file_loader = FileLoader(self)
        
        # Connect the browse buttons from FileLoader to the current dialog
        self.Sauvegarde_Avant_AI_Button.clicked.connect(
            lambda: self.file_loader.open_file_dialog(self.Sauvegarde_Avant_AI, 'folder1_path')
        )
        self.Sauvegarde_Apres_AI_Button.clicked.connect(
            lambda: self.file_loader.open_file_dialog(self.Sauvegarde_Apres_AI, 'folder2_path')
        )
        self.Styles_Button.clicked.connect(
            lambda: self.file_loader.open_file_dialog(self.Styles, 'style_folder_path')
        )
        
        # Connect load button to load layers function
        self.StartLoading.clicked.connect(self.file_loader.load_layers)

    def on_test_button_pressed(self):
        """This function will be called when the TestButton is pressed."""
        grid_layer_path = "Grid/grid.shp"  # Update with your actual grid layer path
        output_folder = "Output_images"  # Update the output folder path
        
        # Create an instance of GridCapture
        grid_capture = GridCapture(grid_layer_path, output_folder)
        
        # Call the function to capture grid cells
        grid_capture.capture_grid_cells()